steps:
  - label: "üîê Load kubeconfig secret"
    key: "load-secrets"
    agents:
      queue: "default"  # Regular agents with internet access
    command: |
      echo "==== STEP 1: Loading Kubeconfig Secret ===="
      export KUBECONFIG_SECRET="$(buildkite-agent secret get k8s_admin_kubeconfig)"
      echo "Secret loaded successfully (first 50 chars): ${KUBECONFIG_SECRET:0:50}..."
      echo "Secret will be available to downstream steps"

  - label: "üõ†Ô∏è Bootstrap service account"
    key: "bootstrap-sa"
    depends_on: "load-secrets"
    agents:
      queue: "kubernetes"  # K8s agents with direct cluster access
    command: |
      echo "==== STEP 2: Creating Service Account ===="
      echo "Using loaded kubeconfig to create scoped service account"
      echo "Generated kubeconfig will be uploaded as artifact"
    plugins:
      - Mykematt/k8s-bootstrap#v1.0.0:
          namespace: "default"
          service-account-name: "deployer-service-account"
          cluster-admin-kubeconfig: "${KUBECONFIG_SECRET}"  # Secret from Step 1
          permissions:
            - "deployments"
            - "pods"
            - "secrets"
            - "configmaps"
            - "services"

  - label: "üöÄ Deploy nginx application"
    key: "deploy-nginx"
    depends_on: "bootstrap-sa"
    agents:
      queue: "kubernetes"  # K8s agents for deployment
    command: |
      echo "==== STEP 3: Deploying Application ===="
      echo "Downloading scoped kubeconfig artifact from Step 2..."
      buildkite-agent artifact download "kubeconfig-*" .
      export KUBECONFIG="$(find . -name 'kubeconfig-*')"
      echo "Using scoped kubeconfig: $KUBECONFIG"
      echo "Applying Kubernetes manifests with limited permissions..."
      kubectl apply -f k8s/configmap.yaml
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml
      echo "‚úÖ Deployment completed successfully!"