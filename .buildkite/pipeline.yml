steps:
  - label: "üîê Load secret & Bootstrap service account"
    key: "load-and-bootstrap"
    agents:
      queue: "kubernetes"
    command: |
      echo "==== STEP 1: Loading Kubeconfig Secret ===="
      KUBECONFIG_SECRET=$(buildkite-agent secret get k8s_admin_kubeconfig)
      export KUBECONFIG_SECRET
      if [ -z "$$KUBECONFIG_SECRET" ]; then
        echo "‚ùå ERROR: Secret k8s_admin_kubeconfig not found in Buildkite Secrets!"
        echo "Please create this secret in your Buildkite Organization Settings ‚Üí Secrets"
        exit 1
      fi
      echo "Secret loaded successfully (length: $$(echo \"$$KUBECONFIG_SECRET\" | wc -c) chars)"
      echo "üîê Secret ready for k8s-bootstrap plugin!"
      echo "==== STEP 2: Creating Service Account ===="
    plugins:
      - Mykematt/k8s-bootstrap#v1.0.0:
          cluster-admin-kubeconfig: "${KUBECONFIG_SECRET}"
          namespace: "default"
          service-account-name: "deployer-service-account"
          permissions:
            - "deployments"
            - "pods"
            - "secrets"
            - "configmaps"
            - "services"

  - label: "üöÄ Deploy nginx application"
    key: "deploy-nginx"
    depends_on: "load-and-bootstrap"
    agents:
      queue: "kubernetes"
    command: |
      echo "==== STEP 3: Deploying Application ===="
      echo "Downloading scoped kubeconfig artifact from Step 1..."
      buildkite-agent artifact download "kubeconfig-*" .
      export KUBECONFIG="$(find . -name 'kubeconfig-*')"
      echo "Using scoped kubeconfig: $KUBECONFIG"
      echo "Applying Kubernetes manifests with limited permissions..."
      kubectl apply -f k8s/configmap.yaml
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml
      echo "‚úÖ Deployment completed successfully!"